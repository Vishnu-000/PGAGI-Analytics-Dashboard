# **PGAGI Analytics Dashboard**  

## **1. Project Overview**  
The **PGAGI Analytics Dashboard** is a **comprehensive web application** designed to **fetch, process, and display real-time data** from multiple APIs. Built using **Next.js, TypeScript, and Tailwind CSS**, it provides an **interactive user experience** with advanced features like **drag-and-drop customization, dark mode, smooth animations, and error handling**.  

This dashboard is developed to help users **track weather forecasts, news updates, and financial stock market data** in an intuitive and visually appealing interface.  

---

## **2. Key Features**  
üîπ **Weather, News, and Stock Data Fetching** ‚Äì Integrates **OpenWeather API, NewsAPI, and Alpha Vantage API** to fetch real-time updates.  
üîπ **Drag-and-Drop Widget Customization** ‚Äì Users can rearrange dashboard elements using **react-beautiful-dnd**.  
üîπ **Dark Mode Toggle** ‚Äì A built-in dark mode feature for a **better viewing experience**.  
üîπ **Performance Optimization** ‚Äì Implemented **lazy loading, code splitting, and caching** for **faster performance**.  
üîπ **Smooth Animations** ‚Äì Integrated **Framer Motion** for **interactive UI transitions**.  
üîπ **Error Handling & API Fallbacks** ‚Äì Ensures a **seamless experience** even when APIs fail.  
üîπ **Unit & E2E Testing** ‚Äì Thoroughly tested using **Jest & Cypress** for **reliability and robustness**.  
üîπ **Live Deployment on Vercel** ‚Äì Hosted at **[Live Demo](https://pgagi--analytics-dashboard.vercel.app/)**.  

---

## **3. Technology Stack**  
The project was developed using modern web technologies:  

### **Frontend Technologies**  
- **Next.js (React + TypeScript)** ‚Äì The core framework for building the application.  
- **Tailwind CSS & SCSS** ‚Äì Used for styling and creating a **responsive UI**.  
- **Framer Motion** ‚Äì Enables smooth animations and UI transitions.  
- **Recharts** ‚Äì Data visualization for stock and weather trends.  
- **React Query & Redux Toolkit** ‚Äì Efficient state and API management.  

### **Backend & APIs**  
- **OpenWeather API** ‚Äì Fetches weather details for any location.  
- **NewsAPI** ‚Äì Retrieves the latest news headlines.  
- **Alpha Vantage API** ‚Äì Provides stock market updates.  

### **Testing & Deployment**  
- **Jest & React Testing Library** ‚Äì For unit and integration testing.  
- **Cypress** ‚Äì For end-to-end testing.  
- **Vercel** ‚Äì Deployment and hosting.  

---

## **4. Project Development Workflow**  

### **Step 1: Project Setup**  
- Initialized the project using **Next.js with TypeScript**.  
- Configured **Tailwind CSS, SCSS, and absolute imports**.  
- Established a **modular folder structure**.  

### **Step 2: API Integration**  
- Implemented API calls using **React Query** for efficient data fetching.  
- Created reusable components for **Weather, News, and Stocks**.  

### **Step 3: UI/UX Enhancements**  
- Developed a **dashboard layout** with **Navbar, Sidebar, and Cards**.  
- Integrated **drag-and-drop functionality** for reordering widgets.  
- Added **dark mode toggle** and **dynamic animations** for a better experience.  

### **Step 4: Performance Optimization**  
- Applied **lazy loading and code splitting** for faster rendering.  
- Used **Redux Toolkit** for managing complex application states.  

### **Step 5: Testing & Error Handling**  
- Added **global error boundaries** to catch unexpected failures.  
- Implemented **Jest tests** for unit components.  
- Conducted **Cypress end-to-end testing** to validate user workflows.  

### **Step 6: Deployment & Documentation**  
- Deployed the application using **Vercel**.  
- Created a detailed **README file** with installation steps and contribution guidelines.  

---

## **5. Installation & Setup**  

### **Clone the Repository**  
```bash
git clone https://github.com/Vishnu-000/pgagi-analytics-dashboard.git
cd pgagi-analytics-dashboard
```

### **Install Dependencies**  
```bash
yarn install
```

### **Set Up Environment Variables**  
Create a `.env.local` file and add API keys:  
```env
NEXT_PUBLIC_WEATHER_API_KEY=your_weather_api_key
NEXT_PUBLIC_NEWS_API_KEY=your_news_api_key
NEXT_PUBLIC_FINANCE_API_KEY=your_finance_api_key
```

### **Run the Application**  
```bash
yarn dev
```
The application will run at **http://localhost:3000**  

### **Testing Commands**  
Run unit tests:  
```bash
yarn test
```
Run End-to-End (E2E) tests:  
```bash
yarn e2e
```

### **Live Deployment on Vercel**  
[**PGAGI Analytics Dashboard**](https://pgagi--analytics-dashboard.vercel.app/)  

---

## **6. Project Folder Structure**  
```
/components    # Reusable UI components
/pages         # Next.js pages
/store         # Redux state management
/hooks         # Custom hooks
/services      # API integrations
/utils         # Utility functions
/tests         # Unit & E2E tests
```

---

## **7. Conclusion**  
The **PGAGI Analytics Dashboard** is a **high-performance, scalable, and user-friendly web application** that seamlessly integrates **real-time weather, news, and financial data**. With **drag-and-drop functionality, dark mode, and smooth animations**, it provides an **engaging and interactive experience**.  

This project showcases **best practices in frontend development**, including:  
‚úîÔ∏è **State management with Redux Toolkit & React Query**  
‚úîÔ∏è **Advanced UI/UX with Tailwind CSS & Framer Motion**  
‚úîÔ∏è **Error handling & API optimizations**  
‚úîÔ∏è **Unit & E2E testing for reliability**  

The project is open-source, and contributions are welcome!